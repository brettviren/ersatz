#+ TITLE: Ersatz 

* Concepts

The Ersatz package allows simulating a distributed, networked application in terms of its throughput, latency and bottlenecks.  It abstracts this application into the following categories:

- network :: a group of routers.
- router :: a switch which routes packets between hosts imposing fixed and bandwidth delays.
- layer :: a set of hosts of a common type.
- host :: an addressable pair of input (=rx=) and output (=tx=) network interfaces.
- process :: marshals messages from the =rx=, through a pipeline of functions and to the =tx= of a host.
- function :: an element of a process pipeline taking one input message and returning one output message.
- message :: a unit of data with source and destination addresses (host names), a size and any number of keyword attributes.

* Configuration

A simulation is assembled based on a configuration file.  The file is of the form of named sections of key/value pairs (INI format).  An instance of each category above is created through its section in the configuration file.  A configuration file section is named with two words.  The first is the category label from the above list and the second is an instance name.  An instance is created through a default /factory method/ or one may be provided with the =factor= configuration item.  It given as a Python "dotted" path (ie, =module.object=).

Each category has a number of specific keyword arguments which which may be set in its configuration section and will be given to the factory.  Any additional keyword arguments given in the configuration section are passed to the constructor of the instance by the factory.  Thus, factories are called with the arguments:

1. the SimPy environment object
2. the instance name
3. category-specific keyword arguments
4. additional keyword arguments.



